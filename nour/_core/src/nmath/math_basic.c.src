#include "nour/nour.h"
#include "../../niter.h"
#include "../../node_core.h"
#include "../../nmath/loops.h"
#include "../../nmath/_nmath_func_core.h"

/**
 * Template for a basic mathematical operation between two input nodes.
 *
 * Function Name:
 *   - `NMath_%OP%_%T%`
 *   - `%OP%`: Represents the operation's name (e.g., "add", "subtract").
 *   - `%T%`: Represents the data type of the operation (e.g., `NR_INT32`, `NR_UINT64`).
 *
 * Macros:
 *   - `%OPC%`: The uppercase version of the operation name, used to map to the specific operation implementation.
 *   - `%NT%`: Represents the low-level C typedef corresponding to `%T%` (e.g., `nr_int32` for `NR_INT32`).
 *
 * Arguments:
 *   - `NFuncArgs* args`: Contains:
 *     - `nodes`: An array of pointers to the input `Node` objects (`n1`, `n2`).
 *     - `out`: A pointer to the output `Node` object (`out`).
 *
 * Functionality:
 *   - This template defines a mathematical operation between two `Node` objects (`n1` and `n2`),
 *     storing the result in the `out` `Node`.
 *   - Handles different data layouts (contiguous, strided, or arbitrary shapes) using `NIter` and `NMultiIter`.
 *   - Efficiently processes data when the input nodes are:
 *     - Both contiguous and of the same shape.
 *     - Partially contiguous (one node is contiguous).
 *     - Non-contiguous, requiring multi-iterator support.
 *
 * Modes of Operation:
 *
 * 1. **Contiguous and Same Shape:**
 *    - When both `n1` and `n2` are contiguous and have the same shape (`Node_SameShape`):
 *      - Iterates over data using a simple loop for maximum performance.
 *
 * 2. **Partially Contiguous:**
 *    - If only one of the nodes is contiguous:
 *      - Uses `NIter` (strided mode) for the non-contiguous node.
 *      - The iterator steps through the non-contiguous node while the contiguous node is accessed directly.
 *
 * 3. **Non-Contiguous or Different Shapes:**
 *    - For fully non-contiguous or differently shaped nodes:
 *      - Utilizes `NIter` for both nodes.
 *      - The iterators handle arbitrary strides and memory layouts.
 *      - Ensures the output shape matches the broadcasting rules.
 *
 * 4. **Broadcasting:**
 *    - If `n1` and `n2` require broadcasting:
 *      - Uses `NMultiIter`, which supports multi-dimensional iteration over broadcasted inputs.
 *      - Iterates through all elements, applying the operation while respecting broadcasting rules.
 *
 * Operation Implementation:
 *   - The macro `NMATH_%NAMEC%` defines the operation to perform.
 *   - Example for `add`:
 *     ```
 *     #define NMATH_ADD(result, a, b) (result) = (a) + (b)
 *     ```
 *
 * Return Value:
 *   - Returns `0` on success.
 *   - Returns `-1` if memory allocation fails or the input nodes cannot be iterated over properly.
 */

//Template//
NR_PUBLIC int
NMath_%OP%_%T%(NFuncArgs* args){
    Node* n1 = args->nodes[0];
    Node* n2 = args->nodes[1];
    Node* out = args->out;

    int ss = Node_SameShape(n1, n2);
    if (!out && ss){
        out = Node_NewEmpty(n1->ndim, n1->shape, args->outtype);
        if (!out){
            return -1;
        }
    }

    int n1c = NODE_IS_CONTIGUOUS(n1);
    int n2c = NODE_IS_CONTIGUOUS(n2);
    int outc = out ? NODE_IS_CONTIGUOUS(out) : 0;

    if (ss){
        if (outc){
            if (n1c & n2c){
                NMATH_LOOP_CCC(NMATH_%OPC%, %O_NT%, %I_NT%);
            }
            else if (n1c | n2c){
                NMATH_LOOP_CSC(NMATH_%OPC%, %O_NT%, %I_NT%);     
            }
            else{
                NMATH_LOOP_CSS(NMATH_%OPC%, %O_NT%, %I_NT%);      
            }
        }
        else{
            if (n1c & n2c){
                NMATH_LOOP_SCC(NMATH_%OPC%, %O_NT%, %I_NT%);
            }
            else if (n1c | n2c){
                NMATH_LOOP_SSC(NMATH_%OPC%, %O_NT%, %I_NT%);
            }
            else{
                NMATH_LOOP_SSS(NMATH_%OPC%, %O_NT%, %I_NT%);      
            }
        }
    }
    else{
        int issclr = NODE_IS_SCALAR(n1) | NODE_IS_SCALAR(n2);
        if (issclr){
            %I_NT% sclr = *(%I_NT%*)(NODE_IS_SCALAR(n1) ? n1->data : n2->data);
            Node* n = NODE_IS_SCALAR(n1) ? n2 : n1;
            int nc = NODE_IS_CONTIGUOUS(n);

            if (outc){
                if (nc){
                    NMATH_LOOP_CC_S(NMATH_%OPC%, %O_NT%, %I_NT%);
                }
                else{
                    NMATH_LOOP_CS_S(NMATH_%OPC%, %O_NT%, %I_NT%);
                }   
            }
            else{
                if (nc){
                    NMATH_LOOP_SC_S(NMATH_%OPC%, %O_NT%, %I_NT%);
                }
                else{
                    NMATH_LOOP_SS_S(NMATH_%OPC%, %O_NT%, %I_NT%);
                }   
            }
        }
        else{
            NMultiIter mit;
            if (NMultiIter_New(args->nodes, 2, &mit) != 0){
                return -1;
            }

            if (!out){
                out = Node_NewEmpty(mit.out_ndim, mit.out_shape, args->outtype);
                if (!out){
                    return -1;
                }
            }

            nr_size_t i;
            NMultiIter_ITER(&mit);
            while (NMultiIter_NOTDONE(&mit))
            {
                *((%O_NT%*)out->data + i) = NMATH_%OPC%(*(%I_NT%*)NMultiIter_ITEM(&mit, 0),
                                                        *(%I_NT%*)NMultiIter_ITEM(&mit, 1));
            
                i++;
                NMultiIter_NEXT(&mit);
            }
        }
    }
    args->out = out;
    return 0;
}

//Template//
NR_STATIC NFunc __NMATH_%OPC%_METHODS__[] = {
%METHODS%
};

//Template//
NR_PUBLIC Node*
NMath_%OP%(Node* c, Node* b, Node*a){
    return _NMath_Func_2in1out(c, b, a, __NMATH_%OPC%_METHODS__, %OUTTYPE%, %INTYPE%);
}