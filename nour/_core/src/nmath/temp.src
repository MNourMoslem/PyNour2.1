//Template//
NR_PUBLIC int
NMath_%OP%_%T%(NFuncArgs* args){
    Node* n1 = args->nodes[0];
    Node* n2 = args->nodes[1];
    Node* out = args->out;

    int ss = Node_SameShape(n1, n2);
    if (!out && ss){
        out = Node_NewEmpty(n1->ndim, n1->shape, n1->dtype.dtype);
        if (!out){
            return -1;
        }
    }

    int n1c = NODE_IS_CONTIGUOUS(n1);
    int n2c = NODE_IS_CONTIGUOUS(n2);
    int outc = out ? NODE_IS_CONTIGUOUS(out) : 0;

    if (ss){
        if (outc){
            if (n1c & n2c){
                NMATH_LOOPS_CCC(NMATH_%OPC%, %O_NT%, %I_NT%);
            }
            else if (n1c | n2c){
                NMATH_LOOPS_CSC(NMATH_%OPC%, %O_NT%, %I_NT%);     
            }
            else{
                NMATH_LOOPS_CSS(NMATH_%OPC%, %O_NT%, %I_NT%);      
            }
        }
        else{
            if (n1c & n2c){
                NMATH_LOOPS_SCC(NMATH_%OPC%, %O_NT%, %I_NT%);
            }
            else if (n1c | n2c){
                NMATH_LOOPS_SSC(NMATH_%OPC%, %O_NT%, %I_NT%);
            }
            else{
                NMATH_LOOPS_SSS(NMATH_%OPC%, %O_NT%, %I_NT%);      
            }
        }
    }
    else{
        int issclr = NODE_IS_SCALAR(n1) | NODE_IS_SCALAR(n2);
        if (issclr){
            %I_NT% sclr = *(%I_NT%*)(NODE_IS_SCALAR(n1) ? n1->data : n2->data);
            Node* n = NODE_IS_SCALAR(n1) ? n2 : n1;
            int nc = NODE_IS_CONTIGUOUS(n);

            if (outc){
                if (nc){
                    NMATH_LOOPS_CC_S(NMATH_%OPC%, %O_NT%, %I_NT%);
                }
                else{
                    NMATH_LOOPS_CS_S(NMATH_%OPC%, %O_NT%, %I_NT%);
                }   
            }
            else{
                if (nc){
                    NMATH_LOOPS_SC_S(NMATH_%OPC%, %O_NT%, %I_NT%);
                }
                else{
                    NMATH_LOOPS_SS_S(NMATH_%OPC%, %O_NT%, %I_NT%);
                }   
            }
        }
        else{
            NMultiIter mit;
            if (NMultiIter_New(args->nodes, 2, &mit) != 0){
                return -1;
            }

            if (!out){
                out = Node_NewEmpty(mit.out_ndim, mit.out_shape, n1->dtype.dtype);
                if (!out){
                    return -1;
                }
            }

            nr_size_t i;
            NMultiIter_ITER(&mit);
            while (NMultiIter_NOTDONE(&mit))
            {
                *((%O_NT%*)out->data + i) = NMATH_%OPC%(*(%I_NT%*)NMultiIter_ITEM(&mit, 0),
                                                        *(%I_NT%*)NMultiIter_ITEM(&mit, 1));
            
                i++;
                NMultiIter_NEXT(&mit);
            }
        }
    }
    args->out = out;
    return 0;
}
